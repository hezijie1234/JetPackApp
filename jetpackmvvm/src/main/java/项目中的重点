目前来说Jetpack的一系列架构组件，代表了，我们后续的Android开发者一定是（“标准化开发模式”）

使用了Jetpack的一系列架构组件，50%容错处理（JetPack+Kotlin）

面试，写了Jetpack的一系列架构组件，到底属于你采用了什么样子的框架模式？
答：我们这里使用了，Google提供的JetPack架构组件库，实现了 ”标准状态管理框架“

TODO Lifecycle
既然提到了，状态管理，就不得不说，Lifecycle：（生命周期管理，保持一致性）
1.解决了 一致性问题（人类写错的东西，无法避免）（Code）
2.业务逻辑代码入侵，处理掉了
3.我们不需要去依赖到 某个Activity，避免了后续的问题

TODO LiveData
状态的变化, 以前我们都是使用接口回调来完成，使用EventBus来完成，这种是属于状态的分发（场景：网络请求回调，跨页面同学的情况 等等）
1.隐士 LiveData（被Lifecycle劫持住）和生命周期绑定的状态分发
2.setValue(true); 触发改变    observe() 观察触发改变  非常的明确， 唯一可信源 （承上启下地完成 状态 从 唯一可信源 到 视图控制器 的输送）
  一个触发，多个观察改变
3.解决难以追溯、难以排查、不可预期 的问题。
4.有一个坑，数据粘性，LiveDataBus

TODO ViewModel
解决 状态管理 和 页面通信 的问题
1.Activity被重建（横屏切换）保存在VM里面的数据
2.SharedViewModel 共享
3.什么周期
4.（解耦）分担Activity责任，（UI Model）-->VM

TODO DataBinding
解决试图的 一致性问题
1.可以完成双向绑定
2.代码全部都是在编译期完成的，APT生成代码（layout 2 tag ）
3.如果编译不通过，BindingImplxxx，布局写错误

结合这个项目说

使用以上，最终就是为了：
解决一致性的问题、将容易出错的操作在后台封装好，方便使用者快速、稳定、不产生预期外错误地编码。